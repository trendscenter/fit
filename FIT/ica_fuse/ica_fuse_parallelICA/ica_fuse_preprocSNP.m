function [SNPnames, SNPdata] = ica_fuse_preprocSNP(inputfile, NCtype, proctype, outfolder)
% function preprocSNP is to load the SNP text file  generated by illumina
% beastation, and then transform 'AA' 'AB','BB' into numbers [1, 0,-1], write out
% new the text files for each subejct, and SNP names, a totla SNPdata text file.
% input text file has format: 1st column SNP names; 2nd to end
% genotypes(AA,AB, BB,NC) for all subjects, 1st row subject ID ( XXXX.GType).
% output text format: each subject has its own genotype text file, one column [-1,0..1].
% addtional total SNPdata output file: row-by- column:  subject-by-snps
% function inputs
% input file name :' XX.txt'
% NCtype: NC processing type. 1: delecte the whole SNP acroos subjects where NC is;
%                               2: substitute with the most likly genotype based on the SNP data on the subjects;(for future)
%                               3: substitute with the most likly genotype based on known haplotype not buildin yet; (for future)
% protype: preprocess data 1: remove the SNPs with constant value
%                          2: remove the SNPs with constant value,and remove the duplicate SNP patterns (for future)
%                          3: no preprocess
% output folder:  '/xxx/hh'; defaut is the same folder as the input file
% function ouput
% SNPname; a character array of SNP nanms
% SNPdata; a matrix of SNP data : subjects by SNPs
% inputfile='/export/research/analysis/human/collaboration/olin/mialab/users/jliu/KentH/ETOH54.txt';
% [SNPnames, SNPdata]=preprocSNP(inputfile,proctype,outfolder)

matlab_version = ica_fuse_get_matlab_version;

if (matlab_version < 14)
    error('Pre-processing SNPs utility works on MATLAB 7 and higher');
end

if ~exist('inputfile', 'var')
    inputfile = ica_fuse_selectEntry('typeEntity', 'file', 'typeSelection', 'single', 'filter', '*.txt', 'title', ...
        'Select SNP text file generated by illumina');
end

if isempty(inputfile)
    error('Please select the SNP text file generated by illumina for preprocessing SNPS');
end

if ~exist('NCtype', 'var')
    NCtype = 1;
end

if ~exist('proctype', 'var')
    proctype = 1;
end

if ~exist('outfolder', 'var')
    outfolder = ica_fuse_selectEntry('typeEntity', 'directory', 'typeSelection', 'single', 'title', ...
        'Select output directory to save the pre-processed data');
    if isempty(outfolder)
        error('Ouput directory to save the pre-prcoessed data is not selected');
    end
end

if isempty(outfolder)
    outfolder = pwd;
end

drawnow;

% textload
fid = fopen(inputfile);
if (fid == -1)
    disp('cannot open the file, check the file name.');
    return
end
firstline=fgetl(fid);
subjectN=length(strfind(firstline, 'Type'));
begindex=strfind(firstline,'e');
endindex=strfind(firstline,'.');
for i=1:subjectN
    subjectName{i}=firstline(begindex(i)+2:endindex(i)-1);
end


formatS='%s';
for i=1:subjectN
    formatS=strcat(formatS,'%s');
end

%=====reading the data %---transform-----------
%  the data are too big, separate into small sets

setsize=10000;
SNPdata=[];SNPnames=[];Dn=1;

disp('Loading data ...')
while ~feof(fid)
    
    [a,position]=textscan(fid, formatS, setsize);%'delimiter', '\t');
    
    % loading the data
    snpname=a{1};
    for i=1:subjectN
        temp=a{i+1}(:);
        temp = regexprep(temp, 'AA', '1');
        temp = regexprep(temp, 'AB', '2');temp = regexprep(temp, 'BA', '2');
        temp = regexprep(temp, 'BB', '3');
        temp = regexprep(temp, 'NC', '4');
        temp = str2num(cell2mat(temp));
        temp = temp(:)-2;
        data(:,i) = temp;
        clear temp;
    end
    %---------Nc transform
    switch NCtype
        case 1
            [r,c]=find(data==2); clear c;
            r = sort(r);d=diff(r); index = find(d==0);r(index)=[];
            data(r,:)=[];
            snpname(r)=[];
            
        case 2
            
        case 3
        otherwise
    end
    
    %---------preproces data with constant value, duplicate SNP patterns
    switch proctype
        case 1
            [r]=find(var(data')==0);
            data(r,:)=[];
            snpname(r)=[];
        case 2
            [r]=find(var(data')==0);
            data(r,:)=[];
            snpname(r)=[];
            
        otherwise
    end
    SNPdata=[SNPdata;data];
    SNPnames=[SNPnames;snpname];
    clear data snpname a temp
end
fclose(fid);
clear firstline formatS

disp('Processing data ...')
%-------------
%
switch proctype
    case 2
        
        %  duplicate
        
        [temp,m,n]=unique(SNPdata,'rows'); clear temp;
        m=sort(m);
        duindex=[1:length(SNPnames)];
        duindex(m)=[];
        j=1;
        while j<=length(duindex);
            
            index=find(n==n(duindex(j)));
            Duplication{Dn}=[SNPnames(index)];Dn=Dn+1;
            for i=2:length(index)
                index1=find(duindex==index(i));
                if isempty(index1)
                    break;
                else
                    duindex(index1)=[] ;
                end
            end
            j=j+1;
        end
        
        SNPnames=SNPnames(m);
        SNPdata=SNPdata(m,:);
        
        
        
    otherwise
        
end


disp(['Saving the data in output directory ', outfolder]);
SNPnames = str2mat(SNPnames);

% Save the data %
SNPdata = SNPdata';

dlmwrite(fullfile(outfolder, 'SNPnames.txt'), SNPnames, 'delimiter', '', 'precision', '%s', 'newline', 'pc');
save(fullfile(outfolder, 'SNPDATA.txt'), 'SNPdata', '-ASCII');

if exist('Duplication', 'var')
    save(fullfile(outfolder, 'SNPduplication.mat'), 'Duplication');
    ica_fuse_writeDupli(fullfile(outfolder, 'SNPduplication.txt'), Duplication);
end

for i=1:subjectN
    temp = SNPdata(i, :)';
    tempDir = fullfile(outfolder, subjectName{i});
    if ~exist(tempDir, 'dir')
        mkdir(tempDir);
    end
    dlmwrite(fullfile(tempDir, 'genecall.txt'), temp, 'delimiter', '', 'precision', '%2i');
end

% End for saving the data %

disp('Done');
fprintf('\n');
